/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.senai.view;

import br.com.senai.dao.DAO;
import br.com.senai.modelo.BebidaBean;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.regex.PatternSyntaxException;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.RowFilter;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingConstants;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author TI01N-2
 */
public class ConsultaEstoqueFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form ConsultaClienteFrame
     */
    private DefaultTableModel tabela;
    private TableRowSorter<TableModel> sorter;

    public ConsultaEstoqueFrame() {
        initComponents();
        tabela = (DefaultTableModel) jTableConsultaEstoque.getModel();
        sorter = new TableRowSorter<TableModel>(tabela);
        jTableConsultaEstoque.setRowSorter(sorter);

        jComboBoxCampo.addItem("Todos");
        for (int x = 0; x < jTableConsultaEstoque.getColumnCount(); x++) {
            jComboBoxCampo.addItem(jTableConsultaEstoque.getColumnName(x));
        }
        atualizaComboBox();

        jButtonConsultaEstoqueActionPerformed(null);

    }

    public void atualizaComboBox() {
        DAO dao = new DAO();

        jComboBoxCampoAtualiza.removeAllItems();

        ArrayList<BebidaBean> listaBebida = dao.getListaBebida();

        for (BebidaBean bebida : listaBebida) {
            jComboBoxCampoAtualiza.addItem(bebida.getNome());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelFundo = new JPanel();
        jLabelTitulo = new JLabel();
        jLabelFiltro = new JLabel();
        jTextFieldFiltro = new JTextField();
        jButtonConsultaEstoque = new JButton();
        jScrollPane = new JScrollPane();
        jTableConsultaEstoque = new JTable();
        jComboBoxCampo = new JComboBox();
        jPanelAtualiza = new JPanel();
        jButtonAtualiza = new JButton();
        jCheckBoxAdiciona = new JCheckBox();
        jComboBoxCampoAtualiza = new JComboBox();
        jCheckBoxPreco = new JCheckBox();
        jCheckBoxNome = new JCheckBox();
        jButtonDeleta = new JButton();
        jTextFieldNome = new JTextField();
        jTextFieldPreco = new JTextField();
        jTextFieldAdiciona = new JTextField();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Dados do Estoque");
        setFrameIcon(new ImageIcon(getClass().getResource("/br/com/senai/view/images/inventory.png"))); // NOI18N

        jLabelTitulo.setFont(new Font("sansserif", 1, 18)); // NOI18N
        jLabelTitulo.setHorizontalAlignment(SwingConstants.CENTER);
        jLabelTitulo.setText("Estoque");

        jLabelFiltro.setText("Filtro:");

        jButtonConsultaEstoque.setText("Consultar");
        jButtonConsultaEstoque.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonConsultaEstoqueActionPerformed(evt);
            }
        });

        jScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

        jTableConsultaEstoque.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome", "Preço", "Quantidade", "Valor Total"
            }
        ));
        jTableConsultaEstoque.setOpaque(false);
        jScrollPane.setViewportView(jTableConsultaEstoque);

        jComboBoxCampo.setMinimumSize(new Dimension(120, 26));
        jComboBoxCampo.setPreferredSize(new Dimension(120, 26));

        jPanelAtualiza.setBorder(BorderFactory.createTitledBorder(null, "Atualizar:", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("sansserif", 1, 14))); // NOI18N
        jPanelAtualiza.setOpaque(false);

        jButtonAtualiza.setText("Atualizar");
        jButtonAtualiza.setEnabled(false);
        jButtonAtualiza.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonAtualizaActionPerformed(evt);
            }
        });

        jCheckBoxAdiciona.setText("Adicionar:");
        jCheckBoxAdiciona.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                jCheckBoxAdicionaItemStateChanged(evt);
            }
        });

        jCheckBoxPreco.setText("Alterar Preço:");
        jCheckBoxPreco.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                jCheckBoxPrecoItemStateChanged(evt);
            }
        });

        jCheckBoxNome.setText("Alterar Nome:");
        jCheckBoxNome.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                jCheckBoxNomeItemStateChanged(evt);
            }
        });

        jButtonDeleta.setText("Deletar");
        jButtonDeleta.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonDeletaActionPerformed(evt);
            }
        });

        jTextFieldNome.setEnabled(false);

        jTextFieldPreco.setEnabled(false);

        jTextFieldAdiciona.setEnabled(false);

        GroupLayout jPanelAtualizaLayout = new GroupLayout(jPanelAtualiza);
        jPanelAtualiza.setLayout(jPanelAtualizaLayout);
        jPanelAtualizaLayout.setHorizontalGroup(jPanelAtualizaLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAtualizaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAtualizaLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAtualizaLayout.createSequentialGroup()
                        .addGroup(jPanelAtualizaLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxNome)
                            .addComponent(jCheckBoxPreco)
                            .addComponent(jCheckBoxAdiciona))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelAtualizaLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldNome, GroupLayout.PREFERRED_SIZE, 284, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldPreco, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldAdiciona, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jComboBoxCampoAtualiza, GroupLayout.PREFERRED_SIZE, 159, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                .addGroup(jPanelAtualizaLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonAtualiza, GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonDeleta, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 74, GroupLayout.PREFERRED_SIZE)))
        );
        jPanelAtualizaLayout.setVerticalGroup(jPanelAtualizaLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAtualizaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBoxCampoAtualiza, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAtualizaLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxAdiciona)
                    .addComponent(jTextFieldAdiciona, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAtualizaLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxPreco)
                    .addComponent(jTextFieldPreco, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleta))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelAtualizaLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxNome)
                    .addComponent(jTextFieldNome, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAtualiza))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        GroupLayout jPanelFundoLayout = new GroupLayout(jPanelFundo);
        jPanelFundo.setLayout(jPanelFundoLayout);
        jPanelFundoLayout.setHorizontalGroup(jPanelFundoLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFundoLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(jPanelFundoLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelFundoLayout.createSequentialGroup()
                        .addComponent(jLabelFiltro)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldFiltro, GroupLayout.PREFERRED_SIZE, 255, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxCampo, GroupLayout.PREFERRED_SIZE, 137, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonConsultaEstoque))
                    .addComponent(jPanelAtualiza, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane, GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                    .addComponent(jLabelTitulo, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanelFundoLayout.setVerticalGroup(jPanelFundoLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFundoLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jLabelTitulo)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelFundoLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonConsultaEstoque)
                    .addComponent(jLabelFiltro)
                    .addComponent(jTextFieldFiltro, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxCampo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane, GroupLayout.PREFERRED_SIZE, 153, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelAtualiza, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        getContentPane().add(jPanelFundo, BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonConsultaEstoqueActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonConsultaEstoqueActionPerformed
        DAO dao = new DAO();

        ArrayList<BebidaBean> listaBebida = dao.getListaBebida();

        tabela.setRowCount(0);

        for (BebidaBean bebida : listaBebida) {
            tabela.addRow(new Object[]{
                bebida.getIdBebida(),
                bebida.getNome(),
                String.format("R$ %.2f", bebida.getPreco()),
                bebida.getQuantidade(),
                String.format("R$ %.2f", bebida.getPreco() * bebida.getQuantidade())
            });
        }

        String text = jTextFieldFiltro.getText();

        if (text.length() == 0) {
            sorter.setRowFilter(null);
        } else {
            try {
                if (jComboBoxCampo.getSelectedIndex() == 0) {
                    sorter.setRowFilter(
                            RowFilter.regexFilter(text));
                } else {
                    sorter.setRowFilter(
                            RowFilter.regexFilter(text, jComboBoxCampo.getSelectedIndex() - 1));
                }
            } // end try
            catch (PatternSyntaxException pse) {
                JOptionPane.showMessageDialog(null,
                        "Bad regex pattern", "Bad regex pattern",
                        JOptionPane.ERROR_MESSAGE);
            } // end catch
        } // end else


    }//GEN-LAST:event_jButtonConsultaEstoqueActionPerformed

    private void jButtonDeletaActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonDeletaActionPerformed
        String nomeBebida = (String) jComboBoxCampoAtualiza.getSelectedItem();
        DAO dao = new DAO();
        dao.deletaBebida(this, nomeBebida);
        jComboBoxCampoAtualiza.removeItem(nomeBebida);
        jButtonConsultaEstoqueActionPerformed(evt);
    }//GEN-LAST:event_jButtonDeletaActionPerformed

    private void jCheckBoxAdicionaItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jCheckBoxAdicionaItemStateChanged
        this.changeButtonAtualiza();

        if (jCheckBoxAdiciona.isSelected()) {
            jTextFieldAdiciona.setEnabled(true);
        } else {
            jTextFieldAdiciona.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBoxAdicionaItemStateChanged

    private void jCheckBoxPrecoItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPrecoItemStateChanged
        this.changeButtonAtualiza();

        if (jCheckBoxPreco.isSelected()) {
            jTextFieldPreco.setEnabled(true);
        } else {
            jTextFieldPreco.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBoxPrecoItemStateChanged

    private void jCheckBoxNomeItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jCheckBoxNomeItemStateChanged
        this.changeButtonAtualiza();

        if (jCheckBoxNome.isSelected()) {
            jTextFieldNome.setEnabled(true);
        } else {
            jTextFieldNome.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBoxNomeItemStateChanged

    private void jButtonAtualizaActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonAtualizaActionPerformed
        boolean add = jCheckBoxAdiciona.isSelected();
        boolean nome = jCheckBoxNome.isSelected();
        boolean preco = jCheckBoxPreco.isSelected();
        DAO dao = new DAO();

        try {

            if (add && !jTextFieldAdiciona.getText().isEmpty()) {
                if (Integer.parseInt(jTextFieldAdiciona.getText()) <= 0) {
                    throw new NumberFormatException();
                }
                dao.addBebida(Integer.parseInt(jTextFieldAdiciona.getText()), (String) jComboBoxCampoAtualiza.getSelectedItem());
            }

            if (preco && !jTextFieldPreco.getText().isEmpty()) {
                if (Double.parseDouble(jTextFieldPreco.getText()) <= 0) {
                    throw new NumberFormatException();
                }
                dao.atualizaPrecoBebida((String) jComboBoxCampoAtualiza.getSelectedItem(), Double.parseDouble(jTextFieldPreco.getText()));
            }

            if (nome && !jTextFieldNome.getText().isEmpty()) {
                dao.atualizaNomeBebida((String) jComboBoxCampoAtualiza.getSelectedItem(), jTextFieldNome.getText());

            }
            atualizaComboBox();
            JOptionPane.showMessageDialog(this, "Atualizado com sucesso", "Atualizar", JOptionPane.INFORMATION_MESSAGE);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Valor inválido", "Erro", JOptionPane.ERROR_MESSAGE);
        }

        jButtonConsultaEstoqueActionPerformed(evt);
        jTextFieldAdiciona.setText("");
        jTextFieldPreco.setText("");
        jTextFieldNome.setText("");
        jCheckBoxAdiciona.setSelected(false);
        jCheckBoxNome.setSelected(false);
        jCheckBoxPreco.setSelected(false);

    }//GEN-LAST:event_jButtonAtualizaActionPerformed

    public void changeButtonAtualiza() {
        if (jCheckBoxNome.isSelected() || jCheckBoxAdiciona.isSelected() || jCheckBoxPreco.isSelected()) {
            jButtonAtualiza.setEnabled(true);
        } else {
            jButtonAtualiza.setEnabled(false);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton jButtonAtualiza;
    private JButton jButtonConsultaEstoque;
    private JButton jButtonDeleta;
    private JCheckBox jCheckBoxAdiciona;
    private JCheckBox jCheckBoxNome;
    private JCheckBox jCheckBoxPreco;
    private JComboBox jComboBoxCampo;
    private JComboBox jComboBoxCampoAtualiza;
    private JLabel jLabelFiltro;
    private JLabel jLabelTitulo;
    private JPanel jPanelAtualiza;
    private JPanel jPanelFundo;
    private JScrollPane jScrollPane;
    private JTable jTableConsultaEstoque;
    private JTextField jTextFieldAdiciona;
    private JTextField jTextFieldFiltro;
    private JTextField jTextFieldNome;
    private JTextField jTextFieldPreco;
    // End of variables declaration//GEN-END:variables
}
